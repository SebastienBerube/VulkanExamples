#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;

float conv(in float[9] kernel, in float[9] data, in float denom, in float offset) 
{
   float res = 0.0;
   for (int i=0; i<9; ++i) 
   {
      res += kernel[i] * data[i];
   }
   return clamp(res/denom + offset, 0.0, 1.0);
}

struct ImageData 
{
    float avg[9];
} imageData;	

void main()
{
    vec3 threshold = vec3(0.95,0.95,0.95);
    
    vec3 sum = vec3(0,0,0);
    float total_weight = 0.0;

    const int RANGE = 8;
    //uint xMin = max(0, gl_GlobalInvocationID.x-RANGE);
    //uint xMax = min(0, gl_GlobalInvocationID.x-RANGE);
    
    for(int i=-RANGE; i<=RANGE; ++i)
    {
      for(int j=-RANGE; j<=RANGE; ++j)
      {
        float weight = 1.0;
        sum += weight * imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x+i, gl_GlobalInvocationID.y+j)).rgb;
        total_weight += weight;
      }
    }

    vec4 res = vec4(sum/total_weight,1);

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), res);
}
